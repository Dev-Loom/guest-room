<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #f8f9fa;
    }
    .container {
      margin-top: 30px;
    }
    .logout-btn {
      position: absolute;
      top: 20px;
      right: 20px;
    }
    .location-select {
      display: flex;
      justify-content: center;
      margin-bottom: 20px;
    }
    .location-select select {
      width: auto;
    }
    #calendar {
      max-width: 900px;
      margin: 0 auto;
    }
    .fc-event {
      background-color: #007bff !important;
      color: white !important;
      border: none !important;
    }
    .toast-container {
      z-index: 1055;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1>Dashboard</h1>
      <button class="btn btn-danger logout-btn" id="logoutBtn">Logout</button>
    </div>
    <div class="location-select">
      <label for="location" class="form-label me-2" style="align-self: self-end;">Select Location:</label>
      <select class="form-select" id="location">
        <option value="" selected disabled>Select a location</option>
      </select>
    </div>
    <div id="calendar"></div>

    <!-- Toast Container -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
      <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
          <strong class="me-auto">Notification</strong>
          <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastBody"></div>
      </div>
    </div>

    <!-- Logout Confirmation Modal -->
    <div class="modal fade" id="logoutModal" tabindex="-1" aria-labelledby="logoutModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="logoutModalLabel">Confirm Logout</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            Are you sure you want to logout?
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-danger" id="confirmLogoutBtn">Logout</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Booking Modal -->
    <div class="modal fade" id="bookingModal" tabindex="-1" aria-labelledby="bookingModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="bookingModalLabel">Add New Booking</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="bookingForm">
              <div class="mb-3">
                <label for="guestName" class="form-label">Name</label>
                <input type="text" class="form-control" id="guestName" required>
              </div>
              <div class="mb-3">
                <label for="startDate" class="form-label">Start Date</label>
                <input type="date" class="form-control" id="startDate" required>
              </div>
              <div class="mb-3">
                <label for="endDate" class="form-label">End Date</label>
                <input type="date" class="form-control" id="endDate" required>
              </div>
              <button type="submit" class="btn btn-primary">Add Booking</button>
            </form>
          </div>
        </div>
      </div>
    </div>

  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
  <script>
    function showToast(message) {
      const toastElement = document.getElementById('liveToast');
      const toastBody = document.getElementById('toastBody');
      toastBody.textContent = message;
      const toast = new bootstrap.Toast(toastElement);
      toast.show();
    }

    document.getElementById('logoutBtn').addEventListener('click', function() {
      const logoutModal = new bootstrap.Modal(document.getElementById('logoutModal'));
      logoutModal.show();
    });

    document.getElementById('confirmLogoutBtn').addEventListener('click', async function() {
      const response = await fetch('/logout', {
        method: 'POST',
        credentials: 'same-origin'
      });

      if (response.ok) {
        window.location.href = '/';
      } else {
        showToast('Logout failed');
      }
    });

    async function loadLocations() {
      try {
        const response = await fetch('http://localhost:3000/getAllRooms');
        const rooms = await response.json();
        const locationSelect = document.getElementById('location');
        rooms.forEach(room => {
          const option = document.createElement('option');
          option.value = room.name;
          option.textContent = room.name;
          locationSelect.appendChild(option);
        });
      } catch (error) {
        console.error('Error fetching rooms:', error);
      }
    }

    let calendar;
    let events = [];

    document.getElementById('location').addEventListener('change', async function() {
      const location = this.value;
      const calendarEl = document.getElementById('calendar');

      if (location) {
        try {
          const response = await fetch(`http://localhost:3000/getBookings?location=${location}`);
          const bookings = await response.json();

          events = bookings.map(booking => ({
            id: booking.id,
            title: booking.guest_name,
            start: booking.start_date,
            end: booking.end_date
          }));

          if (calendar) {
            calendar.destroy();
          }

          calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            events: events,
            editable: true,
            selectable: true,
            validRange: {
              start: new Date().toISOString().split("T")[0]
            },
            eventClick: function(info) {
              if (confirm('Are you sure you want to delete this booking?')) {
                fetch(`http://localhost:3000/cancelBooking/${info.event.id}`, {
                  method: 'DELETE'
                }).then(response => {
                  if (response.ok) {
                    info.event.remove();
                    showToast('Booking deleted');
                  } else {
                    showToast('Failed to delete booking');
                  }
                });
              }
            },
            select: function(info) {
              const bookingModal = new bootstrap.Modal(document.getElementById('bookingModal'));
              document.getElementById('startDate').value = info.startStr;
              document.getElementById('endDate').value = info.endStr;
              bookingModal.show();
            },
            eventContent: function(arg) {
              return {
                html: `<div class="fc-event-main" style="background-color:#007bff;color:white;border:none;">${arg.event.title}</div>`
              };
            }
          });

          calendar.render();

        } catch (error) {
          console.error('Error fetching bookings:', error);
        }
      }
    });

    document.getElementById('bookingForm').addEventListener('submit', async function(event) {
      event.preventDefault();

      const guestName = document.getElementById('guestName').value;
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;
      const location = document.getElementById('location').value;

      if (new Date(startDate) > new Date(endDate)) {
        showToast('Start date must be before or equal to end date');
        return;
      }

      const isOverlap = events.some(event => 
        (new Date(startDate) < new Date(event.end) && new Date(endDate) > new Date(event.start))
      );

      if (isOverlap) {
        showToast('Booking overlaps with an existing booking');
        return;
      }

      try {
        const response = await fetch('http://localhost:3000/addBooking', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ guest_name: guestName, start_date: startDate, end_date: endDate, location })
        });

        if (response.ok) {
          const newBooking = await response.json();
          calendar.addEvent({
            id: newBooking.id,
            title: newBooking.guest_name,
            start: newBooking.start_date,
            end: newBooking.end_date
          });
          const bookingModal = bootstrap.Modal.getInstance(document.getElementById('bookingModal'));
          bookingModal.hide();
          showToast('Booking added');
        } else {
          showToast('Failed to add booking');
        }
      } catch (error) {
        console.error('Error adding booking:', error);
      }
    });

    loadLocations();
  </script>
</body>
</html>
